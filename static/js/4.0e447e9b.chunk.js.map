{"version":3,"sources":["api/AxiosTimeboxesApi.js","components/UserGreetings.js","components/Header.js","components/TimeboxCreator.js","components/TimeboxList.js","components/TimeboxEditor.js","lib/time.js","components/Clock.js","components/ProgressBar.js","components/CurrentTimebox.js","components/EditableTimebox.js","components/InspirationalQuote.js","components/AuthenticatedApp.js"],"names":["axios","require","BASE_URL","AxiosTimeboxesAPI","setAccessToken","accessToken","defaults","headers","common","getAllTimeboxes","a","get","response","data","timeboxes","addTimebox","timeboxToAdd","post","addedTimebox","replaceTimebox","timeboxToReplace","id","Error","put","replacedTimebox","removeTimebox","timeboxToRemove","delete","UserGreetings","props","AuthenticationContext","Consumer","getUserEmail","jwt","decode","email","Header","className","onLogout","onClick","href","TimeboxCreator","handleSubmit","e","onCreate","preventDefault","title","form","current","children","taskInput","value","taskTime","timeInput","React","createRef","ref","this","onSubmit","htmlFor","type","Component","Timebox","lazy","TimeboxList","useState","editInput","hasError","loadingError","loading","state","setState","setTimeboxes","context","useContext","useEffect","TimeboxesAPI","then","catch","error","console","log","prevState","finally","timebox","default","changeTitle","inputValue","target","ErrorMessage","message","createdTimebox","map","index","ErrorBoundary","key","fallback","onDelete","indexToRemove","filter","onEdit","indexToChange","timeboxToEdit","array","splice","onChange","TimeboxEditor","handleConfirmation","onConfirmation","elapsedTime","taskTimeInSeconds","taskTimeInput","titleInput","alert","toFixed","isEditable","defaultValue","disabled","reworkTime","fullSec","Math","floor","normalizeTime","min","max","targetLength","toString","length","fillWithZeros","timeInterval","Clock","hours","minutes","seconds","miliseconds","coloredNumbers","clockNumberClassName","classNames","defaultProps","ProgressBar","percent","trackRemaining","barColor","progressClassName","checkColor","colorName","progressBarClassName","ProgressBarWidth","style","width","CurrentTimebox","isRunning","isPaused","pausesCount","remainingTime","actualPercent","handleStart","handleStop","togglePause","onConfirm","EditableTimebox","initialTime","actualTime","taskTimeInMs","endTime","handleChangeTitle","handleChangeTaskTime","handleChangeTaskTimeWhileRunning","setEndTime","setRemainingTime","Date","now","start","stop","handleEdit","handleEditConfirmation","countDown","setInterval","setElapsedTime","setActualPercent","forceStop","clearInterval","repause","taskTimeAfterPause","StrictMode","onChangeTitle","onChangeTaskTime","InspirationalQuote","quote","setQuote","Quotes","getQuote","err","author","text","AuthenticatedApp"],"mappings":"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","file":"static/js/4.0e447e9b.chunk.js","sourcesContent":["const axios = require('axios');\n\nconst BASE_URL = \"http://localhost:5000/timeboxes\";\n\nconst AxiosTimeboxesAPI = {\n   setAccessToken: function (accessToken) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${accessToken}`;\n   },\n   getAllTimeboxes: async function (accessToken) {\n      const response = await axios.get(BASE_URL);\n      const timeboxes = await response.data;\n      return timeboxes;\n   },\n   addTimebox: async function (timeboxToAdd, accessToken) {\n      const response = await axios.post(BASE_URL, timeboxToAdd);\n      const addedTimebox = await response.data;\n      return addedTimebox;\n   },\n   replaceTimebox: async function (timeboxToReplace, accessToken) {\n      if (!timeboxToReplace.id) {\n         throw new Error(\"Timebox has to have an id to be updated\");\n      }\n      const response = await axios.put(`${BASE_URL}/${timeboxToReplace.id}`, timeboxToReplace);\n      const replacedTimebox = await response.data;\n      return replacedTimebox;\n   },\n   removeTimebox: async function (timeboxToRemove, accessToken) {\n      if (!timeboxToRemove.id) {\n         throw new Error(\"Timebox has to have an id to be updated\");\n      }\n      await axios.delete(`${BASE_URL}/${timeboxToRemove.id}`);\n      //! no need to return anything, if Promise wont throw error it means that timebox was removed\n   }\n}\n\nexport default AxiosTimeboxesAPI;\n","import React from 'react';\nimport jwt from \"jsonwebtoken\";\nimport AuthenticationContext from \"../context/AuthenticationContext\";\n\n\nfunction UserGreetings(props) {\n    return (\n\n        <AuthenticationContext.Consumer>\n            {\n                ({ accessToken }) => <>Witaj {getUserEmail(accessToken)}</>\n            }\n        </AuthenticationContext.Consumer>\n\n    )\n}\n\nexport default UserGreetings;\n\nconst getUserEmail = (accessToken) => {\n    const decodedToken = jwt.decode(accessToken)\n    return decodedToken.email;\n}","import React from 'react';\nimport UserGreetings from \"./UserGreetings\";\nimport AuthenticationContext from \"../context/AuthenticationContext\";\n\nfunction Header() {\n\n    return (\n        <>\n            <header className=\"header\">\n                <UserGreetings />\n                <br />\n                <AuthenticationContext.Consumer>\n                    {\n                        ({ onLogout }) => (\n                            <a className=\"header__logout-link\" onClick={onLogout} href=\"#\">\n                                Wyloguj\n                            </a>\n                        )\n                    }\n                </AuthenticationContext.Consumer>\n            </header>\n        </>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\n\nclass TimeboxCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.form = React.createRef();\n    }\n\n    handleSubmit = e => {\n        const { onCreate } = this.props;\n        e.preventDefault();\n        onCreate({\n            title: this.form.current.children.taskInput.value,\n            taskTime: this.form.current.children.timeInput.value\n        });\n        this.form.current.children.taskInput.value = \"\";\n        this.form.current.children.timeInput.value = \"\";\n    };\n\n    render() {\n        return (\n            <form\n                ref={this.form}\n                onSubmit={this.handleSubmit}\n                className=\"TimeboxCreator\"\n            >\n                <label htmlFor=\"taskInput\">Co robisz?</label>\n                <input id=\"taskInput\" type=\"text\" />\n                <br />\n                <label htmlFor=\"timeInput\">Ile minut?</label>\n                <input id=\"timeInput\" type=\"number\" />\n                <br />\n                <button> Dodaj Timebox'a</button>\n            </form>\n        );\n    }\n}\n\nexport default TimeboxCreator;\n","import React, { Suspense, useState, useEffect, useContext } from \"react\";\nimport TimeboxCreator from \"./TimeboxCreator\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport TimeboxesAPI from \"../api/AxiosTimeboxesApi\"\nimport AuthenticationContext from \"../context/AuthenticationContext\";\nconst Timebox = React.lazy(() => import(\"./Timebox\"));\n\nfunction TimeboxList() {\n\n   const [state, setState] = useState({\n      editInput: \"\",\n      hasError: false,\n      loadingError: false,\n      loading: true\n   })\n\n   const [timeboxes, setTimeboxes] = useState([]);\n\n   const context = useContext(AuthenticationContext);\n\n   //! WEEK8 useEffect fix: nie używać jednego useState, ew użyć prevState\n   useEffect(() => {\n      TimeboxesAPI.setAccessToken(context.accessToken);\n      TimeboxesAPI.getAllTimeboxes(context.accessToken).then(\n         (timeboxes) => setTimeboxes(timeboxes)\n      ).catch(\n         (error) => {\n            console.log(`Wystąpił błąd : ${error}`);\n            setState(prevState => {\n               return {\n                  ...prevState,\n                  loadingError: true\n               }\n            });\n         }\n      ).finally(\n         () => {\n            setState(prevState => {\n               return {\n                  ...prevState,\n                  loading: false\n               }\n            });\n         }\n      )\n   }, [])\n\n   const handleCreate = createdTimebox => {\n      try {\n         addTimebox(createdTimebox, context.accessToken);\n      }\n      catch (error) {\n         console.log(\"metoda addTimebox wyrzuciła błąd\");\n         setState({ hasError: true });\n      }\n\n   };\n\n   const addTimebox = timebox => {\n      import(\"../api/AxiosTimeboxesApi\").then(TimeboxesAPI => {\n         TimeboxesAPI.default.addTimebox(timebox, context.accessToken).then(\n            (addedTimebox) => setTimeboxes(prevState => {\n               const timeboxes = [...prevState, addedTimebox];\n               return timeboxes;\n            })\n         )\n      })\n   };\n\n   const removeTimebox = indexToRemove => {\n      TimeboxesAPI.removeTimebox(timeboxes[indexToRemove], context.accessToken)\n         .then(() => {\n            setTimeboxes(prevState => {\n               const timeboxes = prevState.filter(\n                  (timebox, index) => index !== indexToRemove\n               );\n               return timeboxes;\n            });\n         })\n   };\n\n   const updateArray = (array, index, value) => {\n      array.splice(index, 1);\n      array.splice(index, 0, value);\n      return array;\n   };\n\n   const editTimebox = (indexToChange, timeboxToEdit) => {\n      TimeboxesAPI.replaceTimebox(timeboxToEdit)\n         .then(() => {\n            setTimeboxes(prevState => {\n               const timeboxes = prevState;\n               updateArray(timeboxes, indexToChange, timeboxToEdit);\n               return timeboxes;\n            });\n            setState(prevState => {\n               return {\n                  ...prevState,\n                  editInput: \"\"\n               }\n            })\n         }\n         )\n   };\n\n   const changeTitle = e => {\n      let inputValue = e.target.value;\n      setState(prevState => {\n         return {\n            ...prevState,\n            editInput: inputValue\n         }\n      });\n   };\n\n   const { editInput, hasError, loading, loadingError } = state;\n   return (\n      <>\n         <ErrorMessage hasError={hasError} message=\"timebox creator przestał działać\">\n            <TimeboxCreator onCreate={handleCreate} />\n         </ErrorMessage>\n         <ErrorMessage hasError={loadingError} message=\"Nie udało się załadować timeboxów\">\n            <h2>{loading ? \"loading timeboxes...\" : null}</h2>\n            {\n               timeboxes.map((timebox, index) => (\n                  <ErrorBoundary key={timebox.id} message=\"Coś się wywaliło w Timeboxie\">\n                     <Suspense fallback={<div>Loading...</div>}>\n                        <Timebox\n                           title={timebox.title}\n                           taskTime={timebox.taskTime}\n                           onDelete={() => removeTimebox(index)}\n                           onEdit={() =>\n                              editTimebox(index, {\n                                 ...timebox,\n                                 title: editInput\n                              })\n                           }\n                           onChange={changeTitle}\n                        />\n                     </Suspense>\n                  </ErrorBoundary>\n               ))\n            }\n         </ErrorMessage>\n      </>\n   );\n}\n\nexport default TimeboxList;\n","import React from \"react\";\n\nclass TimeboxEditor extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.titleInput = React.createRef();\n        this.taskTimeInput = React.createRef();\n        // console.count(\"constructor\");\n    }\n\n    componentDidMount() {\n        // console.count(\"mounted component\");\n    }\n\n    componentDidUpdate() {\n        // console.count(\"updated component\");\n    }\n\n    componentWillUnmount() {\n        // console.count(\"unmounted component\");\n    }\n\n    handleConfirmation = e => {\n        const { onConfirmation, elapsedTime, taskTimeInSeconds } = this.props;\n        if ((this.taskTimeInput.current.value * 60 > elapsedTime) && (this.taskTimeInput.current.value * 60 !== taskTimeInSeconds)) {\n            //!need to learn about that\n            e.preventDefault();\n            onConfirmation(this.titleInput.current.value, this.taskTimeInput.current.value)\n        } else {\n            alert(`wprowadzony czas nie może byc mniejszy od ${(elapsedTime / 60).toFixed(2)} min. oraz musi być inny niż wprowadzony czas początkowy`);\n        }\n    }\n\n    render() {\n        // console.count(\"render\");\n        const {\n            title,\n            taskTimeInSeconds,\n            isEditable,\n        } = this.props;\n\n        return (\n            <div\n                className={isEditable ? \"TimeboxEditor\" : \"TimeboxEditor inactive\"}\n            >\n                <label htmlFor=\"taskInput\">Co robisz?</label>\n                <input\n                    id=\"taskInput\"\n                    type=\"text\"\n                    defaultValue={title}\n                    ref={this.titleInput}\n                />\n                <br />\n                <label htmlFor=\"timeInput\">Ile minut?</label>\n                <input\n                    id=\"timeInput\"\n                    type=\"number\"\n                    defaultValue={taskTimeInSeconds / 60}\n                    ref={this.taskTimeInput}\n                />\n                <br />\n                <button disabled={!isEditable} onClick={this.handleConfirmation}>\n                    Zatwierdź zmiany\n            </button>\n            </div>\n        );\n    }\n}\n\nexport default TimeboxEditor;\n","const reworkTime = value => {\n    const fullSec = Math.floor(value);\n    const hours = Math.floor(value / 3600);\n    const minutes = Math.floor(value / 60) >= 60 ? Math.floor(value / 60) - 60 : Math.floor(value / 60);\n    // const minutes = Math.floor(value / 60) === 60 ? 0 : Math.floor(value / 60)\n    const seconds = Math.floor(value % 60);\n    //to prevent counting after passing 0\n    const miliseconds = fullSec >= 0 ? Math.floor((value - fullSec) * 1000) : 0;\n    // return(hours, minutes, seconds, ms);\n    return [hours, minutes, seconds, miliseconds];\n};\n\nfunction timeInterval(min, max, value) {\n    //It will return a number between min and max\n    value = Math.max(min, Math.min(value, max));\n    return value;\n}\n\nfunction fillWithZeros(targetLength, value) {\n    //It will add zeros  before value till value.length = targetLength\n    value = value.toString();\n    while (value.length < targetLength) {\n        value = `0${value}`;\n    }\n    return value;\n}\n\nfunction normalizeTime(min, max, targetLength, value) {\n    return fillWithZeros(targetLength, timeInterval(min, max, value));\n}\n\nexport { reworkTime, normalizeTime };","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from 'prop-types';\nimport { normalizeTime } from '../lib/time'\n\nfunction Clock({ className, hours, minutes, seconds, miliseconds, coloredNumbers }) {\n\n    let clockNumberClassName = classNames(\n        \"clock__numbers\",\n        { \"clock__numbers--colored\": coloredNumbers }\n    )\n\n    hours = normalizeTime(0, 24, 2, hours);\n    minutes = normalizeTime(0, 59, 2, minutes >= 60 ? minutes % 60 : minutes);\n    seconds = normalizeTime(0, 59, 2, seconds);\n    miliseconds = normalizeTime(0, 999, 3, miliseconds);\n\n    return (\n        <h2 className={\"clock \" + className}>\n            {\" \"}\n            Pozostało <mark className={clockNumberClassName}>{hours}</mark>:\n            <mark className={clockNumberClassName}>{minutes}</mark>:\n            <mark className={clockNumberClassName}>{seconds}</mark>:\n            <mark className={clockNumberClassName}>{miliseconds}</mark>\n        </h2>\n    );\n}\n\nClock.defaultProps = {\n    className: \"\",\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    miliseconds: 0,\n\n}\n\nClock.propTypes = {\n    className: PropTypes.string,\n    hours: PropTypes.number.isRequired,\n    minutes: PropTypes.number.isRequired,\n    seconds: PropTypes.number.isRequired,\n    miliseconds: PropTypes.number.isRequired\n}\n\nexport default Clock;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport PropTypes from 'prop-types';\n\n\nfunction ProgressBar({ className = \"\", percent, trackRemaining, barColor }) {\n    let progressClassName = classNames(\n        \"progress\",\n        className,\n        { \"progress--reverse\": trackRemaining }\n    );\n\n    function checkColor(colorName) {\n        if (barColor === colorName) return true\n    }\n\n    let progressBarClassName = classNames(\n        \"progress__bar\",\n        {\n            \"progress__bar--red\": checkColor(\"red\"),\n            \"progress__bar--blue\": checkColor(\"blue\"),\n            \"progress__bar--green\": checkColor(\"green\")\n        }\n    )\n\n    const ProgressBarWidth =\n        trackRemaining === true ? `calc(100 % - ${percent} %)` : `${percent}% `;\n\n    return (\n        <div className={progressClassName}>\n            <div className={progressBarClassName} style={{ width: `${ProgressBarWidth} ` }}></div>\n        </div>\n    );\n}\n\nfunction isNumberBetweenRange(props, propName, componentName) {\n    if (typeof props[propName] !== \"number\") {\n        return new Error(`${propName} has to be number!`);\n    } else if (parseInt(props[propName], 10) > 100 || parseInt(props[propName], 10) < 0) {\n        return new Error(`An error in ${componentName}, ${propName} has to be between 10 and 50 and now it is equal to ${props[propName]}`);\n    }\n}\n\nProgressBar.propTypes = {\n    percent: isNumberBetweenRange,\n    barColor: PropTypes.oneOf(['red', 'green', 'blue']),\n}\n\nexport default ProgressBar;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport ProgressBar from \"./ProgressBar\";\nimport { reworkTime } from \"../lib/time\";\n\n\nfunction CurrentTimebox(props) {\n    const {\n        title,\n        isRunning,\n        isPaused,\n        isEditable,\n        pausesCount,\n        remainingTime,\n        actualPercent,\n        taskTimeInSeconds,\n        handleStart,\n        handleStop,\n        togglePause,\n        onConfirm\n    } = props;\n\n    //if timebox is not running display time entered in input else display  remaining time\n    const [hours, minutes, seconds, miliseconds] = reworkTime(isRunning ? remainingTime : taskTimeInSeconds);\n    return (\n        <div\n            className={\n                isEditable ? \"CurrentTimebox inactive\" : \"CurrentTimebox\"\n            }\n        >\n            <h1>{title}</h1>\n            <Clock\n                className={isPaused ? \"inactive\" : \"\"}\n                hours={hours}\n                minutes={minutes}\n                seconds={seconds}\n                miliseconds={miliseconds}\n                coloredNumbers={true}\n            />\n            <ProgressBar\n                className={isPaused ? \"inactive\" : \"\"}\n                percent={actualPercent}\n                trackRemaining={false}\n                barColor=\"red\"\n            />\n            <button onClick={onConfirm} disabled={isEditable}>\n                Edytuj\n            </button>\n            <button onClick={handleStart} disabled={isRunning}>\n                Start\n            </button>\n            <button onClick={handleStop} disabled={!isRunning}>\n                Stop\n            </button>\n            <button onClick={togglePause} disabled={!isRunning}>\n                {isPaused ? \"Wznów\" : \"Pauzuj\"}\n            </button>\n            Liczba przerw: {pausesCount}\n        </div>\n    );\n}\n\nexport default CurrentTimebox;\n","import React from \"react\";\n\nimport TimeboxEditor from \"./TimeboxEditor\";\nimport CurrentTimebox from \"./CurrentTimebox\";\n\nclass EditableTimebox extends React.Component {\n   state = {\n      title: \"To pole powinno działać\",\n      taskTimeInSeconds: 0,\n      isRunning: false,\n      isPaused: false,\n      isEditable: true,\n      pausesCount: 0,\n      initialTime: 0,\n      actualTime: 0,\n      taskTimeInMs: 0,\n      endTime: 0,\n      remainingTime: 0,\n      elapsedTime: 0,\n      actualPercent: 0\n   };\n\n   handleChangeTitle = (title) => {\n      this.setState({\n         title: title\n      });\n   };\n\n   handleChangeTaskTime = (taskTime) => {\n      const { elapsedTime } = this.state;\n      this.setState({\n         //* 60 to convert minutes to seconds\n         taskTimeInSeconds: taskTime * 60,\n         taskTimeInMs: taskTime * 60 * 1000\n      });\n      //elapsedTime>0 mean that program is running or it is paused\n      if (elapsedTime > 0) {\n         this.handleChangeTaskTimeWhileRunning();\n      }\n   };\n\n   handleChangeTaskTimeWhileRunning = () => {\n      //needed to edit taskTime while counting down!\n      this.setState(state => ({\n         taskTimeInMs: state.taskTimeInMs - state.elapsedTime * 1000\n      }));\n      this.setEndTime();\n      this.setRemainingTime();\n   };\n\n   handleStart = () => {\n      const initialTime = Date.now();\n      this.setState({\n         isRunning: true,\n         initialTime: initialTime\n      });\n      this.start();\n      this.setEndTime();\n   };\n   handleStop = () => {\n      this.stop();\n      const { taskTimeInSeconds } = this.state;\n      this.setState({\n         isRunning: false,\n         isPaused: false,\n         pausesCount: 0,\n         initialTime: 0,\n         actualTime: 0,\n         taskTimeInMs: taskTimeInSeconds * 1000,\n         endTime: 0,\n         remainingTime: 0,\n         actualPercent: 0,\n         elapsedTime: 0\n      });\n   };\n\n   handleEdit = () => {\n\n      this.setState(function (prevState) {\n         const isEditable = !prevState.isEditable;\n         return {\n            isEditable: isEditable\n         };\n      });\n   };\n\n   handleEditConfirmation = (title, taskTime) => {\n      this.handleEdit();\n      this.handleChangeTitle(title);\n      this.handleChangeTaskTime(taskTime);\n\n   }\n\n   start = () => {\n      this.countDown = setInterval(() => {\n         let actualTime = Date.now();\n         console.log(\"timer is working\");\n         this.setState({\n            actualTime: actualTime\n         });\n         this.setRemainingTime();\n         this.setElapsedTime();\n         this.setActualPercent();\n         this.forceStop();\n      }, 10);\n   };\n\n   stop = () => {\n      clearInterval(this.countDown);\n   };\n\n   forceStop = () => {\n      const { remainingTime } = this.state;\n      if (remainingTime <= 0) {\n         this.stop();\n      }\n   };\n\n   togglePause = () => {\n      this.setState(function (prevState) {\n         const isPaused = !prevState.isPaused;\n         return {\n            isPaused: isPaused,\n            pausesCount: prevState.isPaused\n               ? prevState.pausesCount + 1\n               : prevState.pausesCount\n         };\n      });\n      const { isPaused } = this.state;\n      isPaused ? this.repause() : this.stop();\n   };\n\n   repause = () => {\n      //create new initialTime, use remainingTime as new taskTimeInMsInMiliseconds\n      const { remainingTime } = this.state;\n      const initialTime = Date.now();\n      const taskTimeAfterPause = remainingTime * 1000;\n      this.setState({\n         isRunning: true,\n         initialTime: initialTime,\n         taskTimeInMs: taskTimeAfterPause\n      });\n      this.start();\n      this.setEndTime();\n   };\n\n   setEndTime = () => {\n      this.setState(function (prevState) {\n         let endTime = prevState.initialTime + prevState.taskTimeInMs;\n         return {\n            endTime: endTime\n         };\n      });\n   };\n\n   setRemainingTime = () => {\n      this.setState(function (prevState) {\n         let remainingTime =\n            (prevState.endTime - prevState.actualTime) / 1000;\n         return {\n            remainingTime: remainingTime\n         };\n      });\n   };\n\n   setElapsedTime = () => {\n      this.setState(function (prevState) {\n         let elapsedTime =\n            prevState.taskTimeInSeconds - prevState.remainingTime;\n         return {\n            elapsedTime: elapsedTime\n         };\n      });\n   };\n\n   setActualPercent = () => {\n      this.setState(function (prevState) {\n         //*1000 to convert seconds to ms and *100 to convert fraction to a full number\n         let actualPercent =\n            (prevState.elapsedTime / prevState.taskTimeInSeconds) * 100;\n         return {\n            actualPercent: actualPercent\n         };\n      });\n   };\n\n   render() {\n      const {\n         title,\n         taskTimeInSeconds,\n         isRunning,\n         isPaused,\n         isEditable,\n         pausesCount,\n         initialTime,\n         actualTime,\n         taskTimeInMs,\n         endTime,\n         remainingTime,\n         actualPercent,\n         elapsedTime\n      } = this.state;\n\n      return (\n         <>\n            <React.StrictMode>\n               {\n                  isEditable ? (\n                     <TimeboxEditor\n                        title={title}\n                        taskTimeInSeconds={taskTimeInSeconds}\n                        isRunning={isRunning}\n                        isEditable={isEditable}\n                        elapsedTime={elapsedTime}\n                        onChangeTitle={this.handleChangeTitle}\n                        onChangeTaskTime={this.handleChangeTaskTime}\n                        onConfirmation={this.handleEditConfirmation}\n                     />\n                  ) : (\n                        <CurrentTimebox\n                           title={title}\n                           isRunning={isRunning}\n                           isPaused={isPaused}\n                           isEditable={isEditable}\n                           pausesCount={pausesCount}\n                           initialTime={initialTime}\n                           actualTime={actualTime}\n                           taskTimeInMs={taskTimeInMs}\n                           endTime={endTime}\n                           remainingTime={remainingTime}\n                           actualPercent={actualPercent}\n                           elapsedTime={elapsedTime}\n                           taskTimeInSeconds={taskTimeInSeconds}\n                           handleStart={this.handleStart}\n                           handleStop={this.handleStop}\n                           start={this.start}\n                           stop={this.stop}\n                           forceStop={this.forceStop}\n                           togglePause={this.togglePause}\n                           repause={this.repause}\n                           setEndTime={this.setEndTime}\n                           setRemainingTime={this.setRemainingTime}\n                           setElapsedTime={this.setElapsedTime}\n                           setActualPercent={this.setActualPercent}\n                           onConfirm={this.handleEdit}\n                        />\n                     )\n               }\n            </React.StrictMode>\n         </>\n      );\n   }\n}\n\nexport default EditableTimebox;","import React, { useState, useEffect } from 'react';\nfunction InspirationalQuote() {\n\n   const [quote, setQuote] = useState(null);\n\n   useEffect(() => {\n      import('inspirational-quotes').then(\n         (Quotes) => {\n            setQuote(Quotes.getQuote())\n         }\n      ).catch(err => console.log(err, \"Couldn't load inspirational-quotes library\"))\n   })\n   // componentDidMount() {\n   //    import('inspirational-quotes').then(\n   //       (Quotes) => {\n   //          this.setState({\n   //             quote: Quotes.getQuote()\n   //          })\n   //       }\n   //    ).catch(err => console.log(err, \"Couldn't load inspirational-quotes library\"))\n\n   // }\n   return (\n      <>\n         {\n            quote ?\n               <figure>\n                  <figcaption><cite>{quote.author}</cite></figcaption>\n                  <blockquote>{quote.text}</blockquote>\n               </figure >\n               :\n               \"Loading quote...\"\n         }\n      </>\n   )\n}\n\nexport default InspirationalQuote;","import React from 'react';\nimport Header from \"./Header\";\nimport TimeboxList from \"./TimeboxList\";\nimport EditableTimebox from \"./EditableTimebox\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport InspirationalQuote from \"./InspirationalQuote\";\n\n\nfunction AuthenticatedApp() {\n\n    return (\n        <>\n            <Header />\n            <TimeboxList />\n            <ErrorBoundary message=\"wystąpił błąd komponentu EditableTimebox\">\n                <EditableTimebox />\n            </ErrorBoundary>\n            <InspirationalQuote />\n        </>\n    )\n}\n\nexport default AuthenticatedApp;"],"sourceRoot":""}