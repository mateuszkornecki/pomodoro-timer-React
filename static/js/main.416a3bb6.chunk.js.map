{"version":3,"sources":["components/TimeboxEditor.js","components/Clock.js","components/ProgressBar.js","components/CurrentTimebox.js","components/EditableTimebox.js","components/Timebox.js","components/TimeboxCreator.js","components/ErrorBoundary.js","components/TimeboxList.js","components/App.js","index.js"],"names":["TimeboxEditor","props","handleConfirmation","e","console","log","taskTimeInput","current","value","onConfirmation","elapsedTime","taskTimeInSeconds","preventDefault","titleInput","alert","toFixed","React","createRef","count","this","title","isEditable","className","htmlFor","id","type","defaultValue","ref","disabled","onClick","Component","Clock","hours","minutes","seconds","miliseconds","coloredNumbers","clockNumberClassName","classNames","normalizeTime","min","max","targetLength","toString","length","fillWithZeros","Math","timeInterval","ProgressBar","percent","trackRemaining","red","progressClassName","progressBarClassName","ProgressBarWidth","style","width","CurrentTimebox","ms","fullSec","isRunning","isPaused","pausesCount","remainingTime","actualPercent","handleStart","handleStop","togglePause","onConfirm","floor","EditableTimebox","state","initialTime","actualTime","taskTimeInMs","endTime","handleChangeTitle","setState","handleChangeTaskTime","taskTime","handleChangeTaskTimeWhileRunning","setEndTime","setRemainingTime","Date","now","start","stop","handleEdit","prevState","handleEditConfirmation","countDown","setInterval","setElapsedTime","setActualPercent","forceStop","clearInterval","repause","taskTimeAfterPause","StrictMode","onChangeTitle","onChangeTaskTime","Timebox","onDelete","onEdit","onChange","index","Error","TimeboxCreator","handleSubmit","onCreate","uuid","v4","form","children","taskInput","timeInput","onSubmit","ErrorBoundary","hasError","error","errorInfo","message","TimeboxList","timeboxes","editInput","handleCreate","createdTimebox","addTimebox","timebox","removeTimebox","indexToRemove","filter","updateArray","array","splice","editTimebox","indexToChange","contentToChange","changeTitle","target","map","key","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.416a3bb6.chunk.js","sourcesContent":["import React from \"react\";\n\nclass TimeboxEditor extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.titleInput = React.createRef();\n        this.taskTimeInput = React.createRef();\n        console.count(\"constructor\");\n    }\n\n    componentDidMount() {\n        console.count(\"mounted component\");\n    }\n\n    componentDidUpdate() {\n        console.count(\"updated component\");\n    }\n\n    componentWillUnmount() {\n        console.count(\"unmounted component\");\n    }\n\n    handleConfirmation = e => {\n        console.log(typeof this.taskTimeInput.current.value);\n        const { onConfirmation, elapsedTime, taskTimeInSeconds } = this.props;\n        if ((this.taskTimeInput.current.value * 60 > elapsedTime) && (this.taskTimeInput.current.value * 60 !== taskTimeInSeconds)) {\n            //!need to learn about that\n            e.preventDefault();\n            onConfirmation(this.titleInput.current.value, this.taskTimeInput.current.value)\n        } else {\n            alert(`wprowadzony czas nie może byc mniejszy od ${(elapsedTime / 60).toFixed(2)} min. oraz musi być inny niż wprowadzony czas początkowy`);\n        }\n    }\n\n    render() {\n        console.count(\"render\");\n        const {\n            title,\n            taskTimeInSeconds,\n            isEditable,\n        } = this.props;\n\n        return (\n            <div\n                className={isEditable ? \"TimeboxEditor\" : \"TimeboxEditor inactive\"}\n            >\n                <label htmlFor=\"taskInput\">Co robisz?</label>\n                <input\n                    id=\"taskInput\"\n                    type=\"text\"\n                    defaultValue={title}\n                    ref={this.titleInput}\n                />\n                <br />\n                <label htmlFor=\"timeInput\">Ile minut?</label>\n                <input\n                    id=\"timeInput\"\n                    type=\"number\"\n                    defaultValue={taskTimeInSeconds / 60}\n                    ref={this.taskTimeInput}\n                />\n                <br />\n                <button disabled={!isEditable} onClick={this.handleConfirmation}>\n                    Zatwierdź zmiany\n            </button>\n            </div>\n        );\n    }\n}\n\nexport default TimeboxEditor;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nfunction Clock({ className, hours, minutes, seconds, miliseconds, coloredNumbers }) {\n\n    let clockNumberClassName = classNames(\n        \"clock__numbers\",\n        { \"clock__numbers--colored\": coloredNumbers }\n    )\n\n\n    function timeInterval(min, max, value) {\n        //It will return a number between min and max\n        value = Math.max(min, Math.min(value, max));\n        return value;\n    }\n\n    function fillWithZeros(targetLength, value) {\n        //It will add zeros  before value till value.length = targetLength\n        value = value.toString();\n        while (value.length < targetLength) {\n            value = `0${value}`;\n        }\n        return value;\n    }\n\n    function normalizeTime(min, max, targetLength, value) {\n        return fillWithZeros(targetLength, timeInterval(min, max, value));\n    }\n\n    hours = normalizeTime(0, 24, 2, hours);\n    minutes = normalizeTime(0, 59, 2, minutes >= 60 ? minutes % 60 : minutes);\n    seconds = normalizeTime(0, 59, 2, seconds);\n    miliseconds = normalizeTime(0, 999, 3, miliseconds);\n\n    return (\n        <h2 className={\"clock \" + className}>\n            {\" \"}\n            Pozostało <mark className={clockNumberClassName}>{hours}</mark>:\n            <mark className={clockNumberClassName}>{minutes}</mark>:\n            <mark className={clockNumberClassName}>{seconds}</mark>:\n            <mark className={clockNumberClassName}>{miliseconds}</mark>\n        </h2>\n    );\n}\n\nexport default Clock;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nfunction ProgressBar({ className = \"\", percent, trackRemaining, red }) {\n    let progressClassName = classNames(\n        \"progress\",\n        className,\n        { \"progress--reverse\": trackRemaining }\n    );\n\n    let progressBarClassName = classNames(\n        \"progress__bar\",\n        { \"progress__bar--red\": red, }\n    )\n\n    const ProgressBarWidth =\n        trackRemaining === true ? `calc(100 % - ${percent} %)` : `${percent}% `;\n\n    return (\n        <div className={progressClassName}>\n            <div className={progressBarClassName} style={{ width: `${ProgressBarWidth} ` }}></div>\n        </div>\n    );\n}\n\nexport default ProgressBar;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction CurrentTimebox(props) {\n    const {\n        title,\n        isRunning,\n        isPaused,\n        isEditable,\n        pausesCount,\n        remainingTime,\n        actualPercent,\n        taskTimeInSeconds,\n        handleStart,\n        handleStop,\n        togglePause,\n        onConfirm\n    } = props;\n\n    let hours;\n    let minutes;\n    let seconds;\n    let ms;\n    let fullSec;\n\n    const reworkTime = value => {\n        fullSec = Math.floor(value);\n        hours = Math.floor(value / 3600);\n        minutes = Math.floor(value / 60);\n        seconds = Math.floor(value % 60);\n        //to prevent counting after passing 0\n        ms = fullSec >= 0 ? Math.floor((value - fullSec) * 1000) : 0;\n        // return(hours, minutes, seconds, ms);\n    };\n    //if timebox is not running display time entered in input else display  remaining time\n    reworkTime(isRunning ? remainingTime : taskTimeInSeconds);\n    return (\n        <div\n            className={\n                isEditable ? \"CurrentTimebox inactive\" : \"CurrentTimebox\"\n            }\n        >\n            <h1>{title}</h1>\n            <Clock\n                className={isPaused ? \"inactive\" : \"\"}\n                hours={hours}\n                minutes={minutes}\n                seconds={seconds}\n                miliseconds={ms}\n                coloredNumbers={true}\n            />\n            <ProgressBar\n                className={isPaused ? \"inactive\" : \"\"}\n                percent={actualPercent}\n                trackRemaining={false}\n                red={true}\n            />\n            <button onClick={onConfirm} disabled={isEditable}>\n                Edytuj\n            </button>\n            <button onClick={handleStart} disabled={isRunning}>\n                Start\n            </button>\n            <button onClick={handleStop} disabled={!isRunning}>\n                Stop\n            </button>\n            <button onClick={togglePause} disabled={!isRunning}>\n                {isPaused ? \"Wznów\" : \"Pauzuj\"}\n            </button>\n            Liczba przerw: {pausesCount}\n        </div>\n    );\n}\n\nexport default CurrentTimebox;\n","import React from \"react\";\n\nimport TimeboxEditor from \"./TimeboxEditor\";\nimport CurrentTimebox from \"./CurrentTimebox\";\n\nclass EditableTimebox extends React.Component {\n    state = {\n        title: \"To pole powinno działać\",\n        taskTimeInSeconds: 0,\n        isRunning: false,\n        isPaused: false,\n        isEditable: true,\n        pausesCount: 0,\n        initialTime: 0,\n        actualTime: 0,\n        taskTimeInMs: 0,\n        endTime: 0,\n        remainingTime: 0,\n        elapsedTime: 0,\n        actualPercent: 0\n    };\n\n    handleChangeTitle = (title) => {\n        this.setState({\n            title: title\n        });\n    };\n\n    handleChangeTaskTime = (taskTime) => {\n        const { elapsedTime } = this.state;\n        this.setState({\n            //* 60 to convert minutes to seconds\n            taskTimeInSeconds: taskTime * 60,\n            taskTimeInMs: taskTime * 60 * 1000\n        });\n        //elapsedTime>0 mean that program is running or it is paused\n        if (elapsedTime > 0) {\n            this.handleChangeTaskTimeWhileRunning();\n        }\n    };\n\n    handleChangeTaskTimeWhileRunning = () => {\n        //needed to edit taskTime while counting down!\n        this.setState(state => ({\n            taskTimeInMs: state.taskTimeInMs - state.elapsedTime * 1000\n        }));\n        this.setEndTime();\n        this.setRemainingTime();\n    };\n\n    handleStart = () => {\n        const initialTime = Date.now();\n        this.setState({\n            isRunning: true,\n            initialTime: initialTime\n        });\n        this.start();\n        this.setEndTime();\n    };\n    handleStop = () => {\n        this.stop();\n        const { taskTimeInSeconds } = this.state;\n        this.setState({\n            isRunning: false,\n            isPaused: false,\n            pausesCount: 0,\n            initialTime: 0,\n            actualTime: 0,\n            taskTimeInMs: taskTimeInSeconds * 1000,\n            endTime: 0,\n            remainingTime: 0,\n            actualPercent: 0,\n            elapsedTime: 0\n        });\n    };\n\n    handleEdit = () => {\n\n        this.setState(function (prevState) {\n            const isEditable = !prevState.isEditable;\n            return {\n                isEditable: isEditable\n            };\n        });\n    };\n\n    handleEditConfirmation = (title, taskTime) => {\n        this.handleEdit();\n        this.handleChangeTitle(title);\n        this.handleChangeTaskTime(taskTime);\n\n    }\n\n    start = () => {\n        this.countDown = setInterval(() => {\n            let actualTime = Date.now();\n            console.log(\"timer is working\");\n            this.setState({\n                actualTime: actualTime\n            });\n            this.setRemainingTime();\n            this.setElapsedTime();\n            this.setActualPercent();\n            this.forceStop();\n        }, 10);\n    };\n\n    stop = () => {\n        clearInterval(this.countDown);\n    };\n\n    forceStop = () => {\n        const { remainingTime } = this.state;\n        if (remainingTime <= 0) {\n            this.stop();\n        }\n    };\n\n    togglePause = () => {\n        this.setState(function (prevState) {\n            const isPaused = !prevState.isPaused;\n            return {\n                isPaused: isPaused,\n                pausesCount: prevState.isPaused\n                    ? prevState.pausesCount + 1\n                    : prevState.pausesCount\n            };\n        });\n        const { isPaused } = this.state;\n        isPaused ? this.repause() : this.stop();\n    };\n\n    repause = () => {\n        //create new initialTime, use remainingTime as new taskTimeInMsInMiliseconds\n        const { remainingTime } = this.state;\n        const initialTime = Date.now();\n        const taskTimeAfterPause = remainingTime * 1000;\n        this.setState({\n            isRunning: true,\n            initialTime: initialTime,\n            taskTimeInMs: taskTimeAfterPause\n        });\n        this.start();\n        this.setEndTime();\n    };\n\n    setEndTime = () => {\n        this.setState(function (prevState) {\n            let endTime = prevState.initialTime + prevState.taskTimeInMs;\n            return {\n                endTime: endTime\n            };\n        });\n    };\n\n    setRemainingTime = () => {\n        this.setState(function (prevState) {\n            let remainingTime =\n                (prevState.endTime - prevState.actualTime) / 1000;\n            return {\n                remainingTime: remainingTime\n            };\n        });\n    };\n\n    setElapsedTime = () => {\n        this.setState(function (prevState) {\n            let elapsedTime =\n                prevState.taskTimeInSeconds - prevState.remainingTime;\n            return {\n                elapsedTime: elapsedTime\n            };\n        });\n    };\n\n    setActualPercent = () => {\n        this.setState(function (prevState) {\n            //*1000 to convert seconds to ms and *100 to convert fraction to a full number\n            let actualPercent =\n                (prevState.elapsedTime / prevState.taskTimeInSeconds) * 100;\n            return {\n                actualPercent: actualPercent\n            };\n        });\n    };\n\n    render() {\n        const {\n            title,\n            taskTimeInSeconds,\n            isRunning,\n            isPaused,\n            isEditable,\n            pausesCount,\n            initialTime,\n            actualTime,\n            taskTimeInMs,\n            endTime,\n            remainingTime,\n            actualPercent,\n            elapsedTime\n        } = this.state;\n\n        return (\n            <>\n                <React.StrictMode>\n                    {isEditable ? (\n                        <TimeboxEditor\n                            title={title}\n                            taskTimeInSeconds={taskTimeInSeconds}\n                            isRunning={isRunning}\n                            isEditable={isEditable}\n                            elapsedTime={elapsedTime}\n                            onChangeTitle={this.handleChangeTitle}\n                            onChangeTaskTime={this.handleChangeTaskTime}\n                            onConfirmation={this.handleEditConfirmation}\n                        />\n                    ) : (\n                            <CurrentTimebox\n                                title={title}\n                                isRunning={isRunning}\n                                isPaused={isPaused}\n                                isEditable={isEditable}\n                                pausesCount={pausesCount}\n                                initialTime={initialTime}\n                                actualTime={actualTime}\n                                taskTimeInMs={taskTimeInMs}\n                                endTime={endTime}\n                                remainingTime={remainingTime}\n                                actualPercent={actualPercent}\n                                elapsedTime={elapsedTime}\n                                taskTimeInSeconds={taskTimeInSeconds}\n                                handleStart={this.handleStart}\n                                handleStop={this.handleStop}\n                                start={this.start}\n                                stop={this.stop}\n                                forceStop={this.forceStop}\n                                togglePause={this.togglePause}\n                                repause={this.repause}\n                                setEndTime={this.setEndTime}\n                                setRemainingTime={this.setRemainingTime}\n                                setElapsedTime={this.setElapsedTime}\n                                setActualPercent={this.setActualPercent}\n                                onConfirm={this.handleEdit}\n                            />\n                        )\n                    }\n                </React.StrictMode>\n            </>\n        );\n    }\n}\n\nexport default EditableTimebox;\n","import React from \"react\";\n\nfunction Timebox({ title, taskTime, onDelete, onEdit, index, onChange }) {\n    if (taskTime <= 0) {\n        throw new Error(\"Czas zadania musi być większy niż zero\");\n    }\n\n    return (\n        <div className=\"Timebox\">\n            <h3>\n                {title} - {taskTime} min.\n            </h3>\n            <button onClick={onDelete}>Usuń</button>\n            <button onClick={onEdit}>Zmień</button>\n            <input onChange={onChange} />\n        </div>\n    );\n}\n\nexport default Timebox;\n","import React from \"react\";\n\nimport uuid from \"uuid\";\n\nclass TimeboxCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.form = React.createRef();\n    }\n\n    handleSubmit = e => {\n        const { onCreate } = this.props;\n        e.preventDefault();\n        onCreate({\n            id: uuid.v4(),\n            title: this.form.current.children.taskInput.value,\n            taskTime: this.form.current.children.timeInput.value\n        });\n        this.form.current.children.taskInput.value = \"\";\n        this.form.current.children.timeInput.value = \"\";\n    };\n\n    render() {\n        return (\n            <form\n                ref={this.form}\n                onSubmit={this.handleSubmit}\n                className=\"TimeboxCreator\"\n            >\n                <label htmlFor=\"taskInput\">Co robisz?</label>\n                <input id=\"taskInput\" type=\"text\" />\n                <br />\n                <label htmlFor=\"timeInput\">Ile minut?</label>\n                <input id=\"timeInput\" type=\"number\" />\n                <br />\n                <button> Dodaj Timebox'a</button>\n            </form>\n        );\n    }\n}\n\nexport default TimeboxCreator;\n","import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    componentDidCatch(error, errorInfo) {\n        // You can also log the error to an error reporting service\n        console.log(\"%c wystąpił następujący błąd\", \"color: red\", error, errorInfo);\n    }\n\n    render() {\n        const { message, children } = this.props;\n        return (\n            this.state.hasError ? message : children\n        )\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\n\nimport Timebox from \"./Timebox\";\nimport TimeboxCreator from \"./TimeboxCreator\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nclass TimeboxList extends React.Component {\n    state = {\n        timeboxes: [\n            // {title: \"Ucze się formularzy\", taskTime: 15},\n            // {title: \"Ucze się list\", taskTime: 10},\n            // {title: \"Ucze się komponentów niekontrolowanych\", taskTime: 5}\n        ],\n        editInput: \"\"\n    };\n\n    handleCreate = createdTimebox => {\n        this.addTimebox(createdTimebox);\n    };\n\n    addTimebox = timebox => {\n        this.setState(prevState => {\n            const timeboxes = [timebox, ...prevState.timeboxes];\n            return {\n                //OR JUST timeboxes\n                timeboxes: timeboxes\n            };\n        });\n    };\n    //TODO find another way to create this function\n    removeTimebox = indexToRemove => {\n        this.setState(prevState => {\n            const timeboxes = prevState.timeboxes.filter(\n                (timebox, index) => index !== indexToRemove\n            );\n            return {\n                timeboxes: timeboxes\n            };\n        });\n    };\n\n    updateArray = (array, index, value) => {\n        array.splice(index, 1);\n        array.splice(index, 0, value);\n        return array;\n    };\n\n    //TODO: refactor editing title\n\n    editTimebox = (indexToChange, contentToChange) => {\n        this.setState(prevState => {\n            const timeboxes = prevState.timeboxes;\n            this.updateArray(timeboxes, indexToChange, contentToChange);\n            return {\n                timeboxes: timeboxes,\n                editInput: \"\"\n            };\n        });\n    };\n\n    changeTitle = e => {\n        this.setState({\n            editInput: e.target.value\n        });\n    };\n\n    render() {\n        const { timeboxes, editInput } = this.state;\n        return (\n            <>\n                <TimeboxCreator onCreate={this.handleCreate} />\n\n\n                <ErrorBoundary message=\"Coś się wywaliło w Timeboxie\">\n                    {\n                        timeboxes.map((timebox, index) => (\n                            <Timebox\n                                key={timebox.id}\n                                title={timebox.title}\n                                taskTime={timebox.taskTime}\n                                onDelete={() => this.removeTimebox(index)}\n                                onEdit={() =>\n                                    this.editTimebox(index, {\n                                        ...timebox,\n                                        title: editInput\n                                    })\n                                }\n                                onChange={this.changeTitle}\n                            />\n                        ))\n                    }\n                </ErrorBoundary>\n\n            </>\n        );\n    }\n}\n\nexport default TimeboxList;\n","import React from \"react\";\nimport EditableTimebox from \"./EditableTimebox\";\nimport TimeboxList from \"./TimeboxList\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\n\nfunction App() {\n    return (\n        <ErrorBoundary message=\"wywaliło App\">\n            <div className=\"App\">\n                <TimeboxList />\n                <ErrorBoundary message=\"wywaliło EditableTimebox\">\n                    <EditableTimebox />\n                </ErrorBoundary>\n            </div>\n        </ErrorBoundary>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/main.scss\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\".root\"));\n"],"sourceRoot":""}