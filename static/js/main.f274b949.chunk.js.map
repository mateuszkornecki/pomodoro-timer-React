{"version":3,"sources":["components/TimeboxEditor.js","components/Clock.js","components/ProgressBar.js","components/CurrentTimebox.js","components/EditableTimebox.js","components/Timebox.js","components/TimeboxCreator.js","components/TimeboxList.js","components/App.js","index.js"],"names":["TimeboxEditor","props","title","taskTimeInSeconds","isEditable","onChangeTitle","onChangeTaskTime","onConfirm","className","htmlFor","id","onChange","type","defaultValue","disabled","onClick","Clock","hours","minutes","seconds","miliseconds","normalizeTime","min","max","targetLength","value","toString","length","fillWithZeros","Math","timeInterval","ProgressBar","percent","trackRemaining","ProgressBarClasses","ProgressBarWidth","style","width","CurrentTimebox","ms","fullSec","isRunning","isPaused","pausesCount","remainingTime","actualPercent","handleStart","handleStop","togglePause","floor","EditableTimebox","state","initialTime","actualTime","taskTimeInMs","endTime","elapsedTime","handleChangeTitle","e","setState","target","handleChangeTaskTime","handleChangeTaskTimeWhileRunning","setEndTime","setRemainingTime","Date","now","start","stop","handleEdit","prevState","countDown","setInterval","setElapsedTime","setActualPercent","forceStop","clearInterval","repause","taskTimeAfterPause","this","React","Component","Timebox","taskTime","onDelete","onEdit","index","TimeboxCreator","handleSubmit","onCreate","preventDefault","uuid","v4","form","current","children","taskInput","timeInput","createRef","ref","onSubmit","TimeboxList","timeboxes","editInput","handleCreate","createdTimebox","addTimebox","timebox","removeTimebox","indexToRemove","filter","updateArray","array","splice","editTimebox","indexToChange","contentToChange","changeTitle","map","key","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f274b949.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction TimeboxEditor(props) {\n    const {\n        title,\n        taskTimeInSeconds,\n        isEditable,\n        onChangeTitle,\n        onChangeTaskTime,\n        onConfirm\n        // handleStart\n    } = props;\n\n    return (\n        <div\n            className={isEditable ? \"TimeboxEditor\" : \"TimeboxEditor inactive\"}\n        >\n            <label htmlFor=\"taskInput\">Co robisz?</label>\n            <input\n                id=\"taskInput\"\n                onChange={onChangeTitle}\n                type=\"text\"\n                defaultValue={title}\n            />\n            <br />\n            <label htmlFor=\"timeInput\">Ile minut?</label>\n            <input\n                id=\"timeInput\"\n                onChange={onChangeTaskTime}\n                type=\"number\"\n                defaultValue={taskTimeInSeconds}\n            />\n            <br />\n            <button disabled={!isEditable} onClick={onConfirm}>\n                Zatwierd≈∫ zmiany\n            </button>\n        </div>\n    );\n}\n\nexport default TimeboxEditor;\n","import React from \"react\";\n\nfunction Clock({ className = \"\", hours, minutes, seconds, miliseconds }) {\n    function timeInterval(min, max, value) {\n        //It will return a number between min and max\n        value = Math.max(min, Math.min(value, max));\n        return value;\n    }\n\n    function fillWithZeros(targetLength, value) {\n        //It will add zeros  before value till value.length = targetLength\n        value = value.toString();\n        while (value.length < targetLength) {\n            value = `0${value}`;\n        }\n        return value;\n    }\n\n    function normalizeTime(min, max, targetLength, value) {\n        return fillWithZeros(targetLength, timeInterval(min, max, value));\n    }\n\n    hours = normalizeTime(0, 24, 2, hours);\n    minutes = normalizeTime(0, 59, 2, minutes >= 60 ? minutes % 60 : minutes);\n    seconds = normalizeTime(0, 59, 2, seconds);\n    miliseconds = normalizeTime(0, 999, 3, miliseconds);\n\n    return (\n        <h2 className={\"Clock \" + className}>\n            {\" \"}\n            Pozosta≈Ço {hours}:{minutes}:{seconds}:{miliseconds}\n        </h2>\n    );\n}\n\nexport default Clock;\n","import React from \"react\";\n\nfunction ProgressBar({ className = \"\", percent, trackRemaining }) {\n    const ProgressBarClasses =\n        trackRemaining === true\n            ? `ProgressBar ProgressBar--reverse ${className}`\n            : `ProgressBar ${className}`;\n    const ProgressBarWidth =\n        trackRemaining === true ? `calc(100% - ${percent}%)` : `${percent}%`;\n\n    return (\n        <div className={ProgressBarClasses}>\n            <div style={{ width: `${ProgressBarWidth}` }}></div>\n        </div>\n    );\n}\n\nexport default ProgressBar;\n","import React from \"react\";\nimport Clock from \"./Clock\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction CurrentTimebox(props) {\n    const {\n        title,\n        isRunning,\n        isPaused,\n        isEditable,\n        pausesCount,\n        remainingTime,\n        actualPercent,\n        taskTimeInSeconds,\n        handleStart,\n        handleStop,\n        togglePause,\n        onConfirm\n    } = props;\n\n    let hours;\n    let minutes;\n    let seconds;\n    let ms;\n    let fullSec;\n\n    const reworkTime = value => {\n        fullSec = Math.floor(value);\n        hours = Math.floor(value / 3600);\n        minutes = Math.floor(value / 60);\n        seconds = Math.floor(value % 60);\n        //to prevent counting after passing 0\n        ms = fullSec >= 0 ? Math.floor((value - fullSec) * 1000) : 0;\n        // return(hours, minutes, seconds, ms);\n    };\n    //if timebox is not running display time entered in input else display  remaining time\n    reworkTime(isRunning ? remainingTime : taskTimeInSeconds);\n    return (\n        <div\n            className={\n                isEditable ? \"CurrentTimebox inactive\" : \"CurrentTimebox\"\n            }\n        >\n            <h1>{title}</h1>\n            <Clock\n                className={isPaused ? \"inactive\" : \"\"}\n                hours={hours}\n                minutes={minutes}\n                seconds={seconds}\n                miliseconds={ms}\n            />\n            <ProgressBar\n                className={isPaused ? \"inactive\" : \"\"}\n                percent={actualPercent}\n                trackRemaining={false}\n            />\n            <button onClick={onConfirm} disabled={isEditable}>\n                Edytuj\n            </button>\n            <button onClick={handleStart} disabled={isRunning}>\n                Start\n            </button>\n            <button onClick={handleStop} disabled={!isRunning}>\n                Stop\n            </button>\n            <button onClick={togglePause} disabled={!isRunning}>\n                {isPaused ? \"Wzn√≥w\" : \"Pauzuj\"}\n            </button>\n            Liczba przerw: {pausesCount}\n        </div>\n    );\n}\n\nexport default CurrentTimebox;\n","import React from \"react\";\n\nimport TimeboxEditor from \"./TimeboxEditor\";\nimport CurrentTimebox from \"./CurrentTimebox\";\n\nclass EditableTimebox extends React.Component {\n    state = {\n        title: \"To pole powinno dzia≈Çaƒá\",\n        taskTimeInSeconds: 0,\n        isRunning: false,\n        isPaused: false,\n        isEditable: true,\n        pausesCount: 0,\n        initialTime: 0,\n        actualTime: 0,\n        taskTimeInMs: 0,\n        endTime: 0,\n        remainingTime: 0,\n        elapsedTime: 0,\n        actualPercent: 0\n    };\n\n    handleChangeTitle = e => {\n        this.setState({\n            title: e.target.value\n        });\n    };\n\n    handleChangeTaskTime = e => {\n        const { elapsedTime } = this.state;\n        this.setState({\n            //* 60 to convert seconds to minutes\n            taskTimeInSeconds: e.target.value * 60,\n            taskTimeInMs: e.target.value * 60 * 1000\n        });\n        //elapsedTime>0 mean that program is running or it is paused\n        if (elapsedTime > 0) {\n            this.handleChangeTaskTimeWhileRunning();\n        }\n    };\n\n    handleChangeTaskTimeWhileRunning = () => {\n        //needed to edit taskTime while counting down!\n        this.setState(state => ({\n            taskTimeInMs: state.taskTimeInMs - state.elapsedTime * 1000\n        }));\n        this.setEndTime();\n        this.setRemainingTime();\n    };\n\n    handleStart = () => {\n        const initialTime = Date.now();\n        this.setState({\n            isRunning: true,\n            initialTime: initialTime\n        });\n        this.start();\n        this.setEndTime();\n    };\n    handleStop = () => {\n        this.stop();\n        const { taskTimeInSeconds } = this.state;\n        this.setState({\n            isRunning: false,\n            isPaused: false,\n            pausesCount: 0,\n            initialTime: 0,\n            actualTime: 0,\n            taskTimeInMs: taskTimeInSeconds * 1000,\n            endTime: 0,\n            remainingTime: 0,\n            actualPercent: 0,\n            elapsedTime: 0\n        });\n    };\n\n    handleEdit = () => {\n        this.setState(function (prevState) {\n            const isEditable = !prevState.isEditable;\n            return {\n                isEditable: isEditable\n            };\n        });\n    };\n\n    start = () => {\n        this.countDown = setInterval(() => {\n            let actualTime = Date.now();\n            this.setState({\n                actualTime: actualTime\n            });\n            // keeps remaining time actual\n            this.setRemainingTime();\n            this.setElapsedTime();\n            this.setActualPercent();\n            this.forceStop();\n        }, 10);\n    };\n\n    stop = () => {\n        clearInterval(this.countDown);\n    };\n\n    forceStop = () => {\n        const { remainingTime } = this.state;\n        if (remainingTime <= 0) {\n            this.stop();\n        }\n    };\n\n    togglePause = () => {\n        this.setState(function (prevState) {\n            const isPaused = !prevState.isPaused;\n            return {\n                isPaused: isPaused,\n                pausesCount: prevState.isPaused\n                    ? prevState.pausesCount + 1\n                    : prevState.pausesCount\n            };\n        });\n        const { isPaused } = this.state;\n        isPaused ? this.repause() : this.stop();\n    };\n\n    repause = () => {\n        //create new initialTime, use remainingTime as new taskTimeInMsInMiliseconds\n        const { remainingTime } = this.state;\n        const initialTime = Date.now();\n        const taskTimeAfterPause = remainingTime * 1000;\n        this.setState({\n            isRunning: true,\n            initialTime: initialTime,\n            taskTimeInMs: taskTimeAfterPause\n        });\n        this.start();\n        this.setEndTime();\n    };\n\n    setEndTime = () => {\n        this.setState(function (prevState) {\n            let endTime = prevState.initialTime + prevState.taskTimeInMs;\n            return {\n                endTime: endTime\n            };\n        });\n    };\n\n    setRemainingTime = () => {\n        this.setState(function (prevState) {\n            let remainingTime =\n                (prevState.endTime - prevState.actualTime) / 1000;\n            return {\n                remainingTime: remainingTime\n            };\n        });\n    };\n\n    setElapsedTime = () => {\n        this.setState(function (prevState) {\n            let elapsedTime =\n                prevState.taskTimeInSeconds - prevState.remainingTime;\n            return {\n                elapsedTime: elapsedTime\n            };\n        });\n    };\n\n    setActualPercent = () => {\n        this.setState(function (prevState) {\n            //*1000 to convert seconds to ms and *100 to convert fraction to a full number\n            let actualPercent =\n                (prevState.elapsedTime / prevState.taskTimeInSeconds) * 100;\n            return {\n                actualPercent: actualPercent\n            };\n        });\n    };\n\n    render() {\n        const {\n            title,\n            taskTimeInSeconds,\n            isRunning,\n            isPaused,\n            isEditable,\n            pausesCount,\n            initialTime,\n            actualTime,\n            taskTimeInMs,\n            endTime,\n            remainingTime,\n            actualPercent,\n            elapsedTime\n        } = this.state;\n\n        return (\n            <>\n                <TimeboxEditor\n                    title={title}\n                    taskTimeInSeconds={taskTimeInSeconds}\n                    isRunning={isRunning}\n                    isEditable={isEditable}\n                    onChangeTitle={this.handleChangeTitle}\n                    onChangeTaskTime={this.handleChangeTaskTime}\n                    onConfirm={this.handleEdit}\n                // handleStart={this.handleStart}\n                />\n                <CurrentTimebox\n                    title={title}\n                    isRunning={isRunning}\n                    isPaused={isPaused}\n                    isEditable={isEditable}\n                    pausesCount={pausesCount}\n                    initialTime={initialTime}\n                    actualTime={actualTime}\n                    taskTimeInMs={taskTimeInMs}\n                    endTime={endTime}\n                    remainingTime={remainingTime}\n                    actualPercent={actualPercent}\n                    elapsedTime={elapsedTime}\n                    taskTimeInSeconds={taskTimeInSeconds}\n                    handleStart={this.handleStart}\n                    handleStop={this.handleStop}\n                    start={this.start}\n                    stop={this.stop}\n                    forceStop={this.forceStop}\n                    togglePause={this.togglePause}\n                    repause={this.repause}\n                    setEndTime={this.setEndTime}\n                    setRemainingTime={this.setRemainingTime}\n                    setElapsedTime={this.setElapsedTime}\n                    setActualPercent={this.setActualPercent}\n                    onConfirm={this.handleEdit}\n                />\n            </>\n        );\n    }\n}\n\nexport default EditableTimebox;\n","import React from \"react\";\n\nfunction Timebox({ title, taskTime, onDelete, onEdit, index, onChange }) {\n    return (\n        <div className=\"Timebox\">\n            <h3>\n                {title} - {taskTime} min.\n            </h3>\n            <button onClick={onDelete}>Usu≈Ñ</button>\n            <button onClick={onEdit}>Zmie≈Ñ</button>\n            <input onChange={onChange} />\n        </div>\n    );\n}\n\nexport default Timebox;\n","import React from \"react\";\n\nimport uuid from \"uuid\";\n\nclass TimeboxCreator extends React.Component {\n    constructor(props) {\n        super(props);\n        this.form = React.createRef();\n    }\n\n    handleSubmit = e => {\n        const { onCreate } = this.props;\n        e.preventDefault();\n        onCreate({\n            id: uuid.v4(),\n            title: this.form.current.children.taskInput.value,\n            taskTime: this.form.current.children.timeInput.value\n        });\n        this.form.current.children.taskInput.value = \"\";\n        this.form.current.children.timeInput.value = \"\";\n    };\n\n    render() {\n        return (\n            <form\n                ref={this.form}\n                onSubmit={this.handleSubmit}\n                className=\"TimeboxCreator\"\n            >\n                <label htmlFor=\"taskInput\">Co robisz?</label>\n                <input id=\"taskInput\" type=\"text\" />\n                <br />\n                <label htmlFor=\"timeInput\">Ile minut?</label>\n                <input id=\"timeInput\" type=\"number\" />\n                <br />\n                <button> Dodaj Timebox'a</button>\n            </form>\n        );\n    }\n}\n\nexport default TimeboxCreator;\n","import React from \"react\";\n\nimport Timebox from \"./Timebox\";\nimport TimeboxCreator from \"./TimeboxCreator\";\n\nclass TimeboxList extends React.Component {\n    state = {\n        timeboxes: [\n            // {title: \"Ucze siƒô formularzy\", taskTime: 15},\n            // {title: \"Ucze siƒô list\", taskTime: 10},\n            // {title: \"Ucze siƒô komponent√≥w niekontrolowanych\", taskTime: 5}\n        ],\n        editInput: \"\"\n    };\n\n    handleCreate = createdTimebox => {\n        this.addTimebox(createdTimebox);\n    };\n\n    addTimebox = timebox => {\n        this.setState(prevState => {\n            const timeboxes = [timebox, ...prevState.timeboxes];\n            return {\n                //OR JUST timeboxes\n                timeboxes: timeboxes\n            };\n        });\n    };\n    //TODO find another way to create this function\n    removeTimebox = indexToRemove => {\n        this.setState(prevState => {\n            const timeboxes = prevState.timeboxes.filter(\n                (timebox, index) => index !== indexToRemove\n            );\n            return {\n                timeboxes: timeboxes\n            };\n        });\n    };\n\n    updateArray = (array, index, value) => {\n        array.splice(index, 1);\n        array.splice(index, 0, value);\n        return array;\n    };\n\n    //TODO: refactor editing title\n\n    editTimebox = (indexToChange, contentToChange) => {\n        this.setState(prevState => {\n            const timeboxes = prevState.timeboxes;\n            this.updateArray(timeboxes, indexToChange, contentToChange);\n            return {\n                timeboxes: timeboxes,\n                editInput: \"\"\n            };\n        });\n    };\n\n    changeTitle = e => {\n        this.setState({\n            editInput: e.target.value\n        });\n    };\n\n    render() {\n        const { timeboxes, editInput } = this.state;\n        return (\n            <>\n                <TimeboxCreator onCreate={this.handleCreate} />\n                {timeboxes.map((timebox, index) => (\n                    <Timebox\n                        key={timebox.id}\n                        title={timebox.title}\n                        taskTime={timebox.taskTime}\n                        onDelete={() => this.removeTimebox(index)}\n                        onEdit={() =>\n                            this.editTimebox(index, {\n                                ...timebox,\n                                title: editInput\n                            })\n                        }\n                        onChange={this.changeTitle}\n                    />\n                ))}\n            </>\n        );\n    }\n}\n\nexport default TimeboxList;\n","import React from \"react\";\nimport EditableTimebox from \"./EditableTimebox\";\nimport TimeboxList from \"./TimeboxList\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TimeboxList />\n            <EditableTimebox />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/main.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\".root\"));\n"],"sourceRoot":""}